Un microservicio es una parte de la aplicación (subaplicación) que se encarga de algo en específicio:
* Por ejemplo, el nuestra app de ecommerce tenemos los microservicios dedicados a los productos, los clientes, a la facturación. Esto promueve el bajo acoplamiento en nuestra aplicación.
* Cada microservicio se sirve en un puerto diferente: por ejemplo, el de productos en el puerto 3000, el de clientes en el 3001, y así.
	- En lb4, el puerto local se establece en src/index.ts. Por defecto suele ser el 3000.
Ventajas: bajo acoplamiento, separación de responsabilidades, más mantenible que tener un código monolítico.
	- es mejor compilar un microservicio que TODO el proyecto (código monolítico).
	- si se cae una parte(x ej facturación), el resto seguirá funcionando (clientes, productos).
		* o si se caen las notificaciones, encolar las notificaciones a una bd, hasta que se haya reparado la parte de notificaciones.
Usarse en casos de: aplicaciones de gran envergadura. Al plantear el modelo, se podrá visualizar si es útil, dinámico usar microservicios.
Desventajas: Implica un poco más de trabajo, pero la ganancia en las ventajas (en proyectos grandes) es muy notable.

1 REPOSITORIO X MICROSERVICIO. Los microservicios serían aplicaciones dentro del proyecto.

QUIENES MANEJAN BIEN ESTO (en una casa de desarrollo de software):
* arquitecto: define cuáles serán las unidades de negocio
* expertos del dominio de negocio

POR MI PARTE:
* analizar y dar argumentos para dividir las entidades a agrupar y crear microservicios.
* La idea no es granularizar la aplicación (en vez de simplificar, complicar el desarrollo).

TOKENS:
CREACIÓN: cuando por ejemplo un usuario se autentica, el modulo de tokens le genera un token de sesion, entonces miesntras el usuario está logeado, usa dicho token para realizar ciertas acciones (como
	crear un nuevo producto por ejemplo).
VALIDACIÓN: Al realizar ciertas acciones, como crear un producto, el sistema le pregunta al módulo de tokens si el token que está usando el usuario que quiere crear el producto, es válido. En caso afirmativo,
	permite la operación. Caso contrario, le niega la operación  (por ejemplo, si el token expira luego de un tiempo de inactividad del mismo, mostrar: "Su sesión ha expirado, por favor, inicie sesión nuevamente").
