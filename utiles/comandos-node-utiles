### comandos node utiles:

1-npm init --yes: crea un package JSON que nos permite describir nuestro proyecto
2-npm i express morgan: para instalar express y morgan. express es un framework de node que nos permite escribir código de servidor de una manera sencilla y morgan nos permite ver por consola las peticiones que nos van llegando.
3-npm i nodemon -D: modulo que reinicia el servidor por mi (para no hacerlo manualmente). -D ejecuta nodemon no como una dependencia principal, sino como una de desarrollo. Esto significa que va a ejecutar nodemo solo durante el desarrollo de la aplicación, mas no en producción ni cuando esté desplegada.

### parametros morgan utiles:

app.use(morgan('dev'));

dev: brinda una breve descripción de las peticiones
combined: brinda una descripción más detallada de las peticiones

### en package.json

1 predeterminado:
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  
como lo dejamos
"scripts": {
    "dev": "nodemon src/index.js"
  },
 
 con nodemon instalado (sección de comandos node utiles, punto 3), nodemon se encargará de refrescar la página index.js cada vez que detecte cambios en su código fuente.
 
 --------------- con lo hecho al momento:

dejamos de usar el comando
	node src/index.js
y pasamos a usar
	npm run dev	-> ejecuta el script dev, el cual (en package.json, punto 1) está configurado para ejecutar nodemon, que a su vez ejecuta el archivo src/index.js, pero con la diferencia de que nodemon si detecta que se guardan cambios en dicho archivo, refrescará la visualización de la página, ahorrándonos ese trabajo de estar refrescandola manualmente.
	
### código extraido y explicado
// routes
app.get('/', (req, res) => {    // responde con 'Hello World' cuando se solicita (GET) la página de inicio
    res.send('Hello World');    // aquí podriamos responder con HTML, CSS, etc (el contenido de la página principal)
});

